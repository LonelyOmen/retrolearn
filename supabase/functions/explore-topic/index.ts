import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { topic } = await req.json();
    
    if (!topic) {
      throw new Error('Topic is required');
    }

    console.log('Exploring topic:', topic);

    // Get API keys
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    const youtubeApiKey = Deno.env.get('YOUTUBE_API_KEY');
    const redditApiKey = Deno.env.get('REDDIT_API_KEY');
    const tavilyApiKey = Deno.env.get('TAVILY_API_KEY');

    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY not configured');
    }

    // Generate overview and tips using Gemini
    const geminiPrompt = `For the topic "${topic}", create an educational overview and learning tips.

Response format (JSON only):
{
  "overview": "2-3 paragraph detailed explanation of ${topic}",
  "tips": [
    "Practical learning tip 1",
    "Practical learning tip 2", 
    "Practical learning tip 3",
    "Practical learning tip 4",
    "Practical learning tip 5"
  ]
}

Return only valid JSON, no additional text or markdown.`;

    console.log('Calling Gemini API...');
    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: geminiPrompt
            }]
          }],
          generationConfig: {
            temperature: 0.3,
            topK: 20,
            topP: 0.8,
            maxOutputTokens: 1024,
            responseMimeType: "application/json"
          }
        })
      }
    );

    if (!geminiResponse.ok) {
      console.error('Gemini API error:', geminiResponse.status, await geminiResponse.text());
      throw new Error(`Gemini API error: ${geminiResponse.status}`);
    }

    const geminiData = await geminiResponse.json();
    const geminiContent = geminiData.candidates?.[0]?.content?.parts?.[0]?.text;
    
    console.log('Full Gemini API response:', JSON.stringify(geminiData, null, 2));
    
    if (!geminiContent) {
      console.error('No content in Gemini response. Structure:', {
        candidates: geminiData.candidates,
        candidateCount: geminiData.candidates?.length,
        firstCandidate: geminiData.candidates?.[0],
        content: geminiData.candidates?.[0]?.content,
        parts: geminiData.candidates?.[0]?.content?.parts
      });
      throw new Error('No content generated by Gemini');
    }

    console.log('Raw Gemini response:', geminiContent);

    // Parse Gemini response
    let geminiJsonStr = geminiContent.trim();
    if (geminiJsonStr.startsWith('```json')) {
      geminiJsonStr = geminiJsonStr.slice(7);
    }
    if (geminiJsonStr.startsWith('```')) {
      geminiJsonStr = geminiJsonStr.slice(3);
    }
    if (geminiJsonStr.endsWith('```')) {
      geminiJsonStr = geminiJsonStr.slice(0, -3);
    }
    geminiJsonStr = geminiJsonStr.trim();

    let geminiResult;
    try {
      geminiResult = JSON.parse(geminiJsonStr);
    } catch (parseError) {
      console.error('Gemini JSON parse error:', parseError);
      console.error('Content to parse:', geminiJsonStr);
      // Fallback content
      geminiResult = {
        overview: `${topic} is an important subject that offers valuable learning opportunities. This field encompasses various concepts and principles that can benefit learners at different levels. Understanding ${topic} requires dedication and practice.`,
        tips: [
          "Start with the basics and build a strong foundation",
          "Practice regularly to reinforce your learning",
          "Join communities and engage with other learners",
          "Use multiple resources to get different perspectives",
          "Be patient and persistent in your learning journey"
        ]
      };
    }

    // Fetch YouTube videos
    let videos = [];
    if (youtubeApiKey) {
      try {
        console.log('Searching YouTube videos...');
        const youtubeResponse = await fetch(
          `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(topic + ' tutorial')}&type=video&maxResults=5&key=${youtubeApiKey}`
        );

        if (youtubeResponse.ok) {
          const youtubeData = await youtubeResponse.json();
          videos = youtubeData.items?.map((item: any) => ({
            title: item.snippet.title,
            url: `https://www.youtube.com/watch?v=${item.id.videoId}`,
            description: item.snippet.description.substring(0, 150) + '...'
          })) || [];
          console.log(`Found ${videos.length} YouTube videos`);
        }
      } catch (error) {
        console.error('YouTube API error:', error);
      }
    }

    // Fallback videos if YouTube API fails
    if (videos.length === 0) {
      videos = [
        {
          title: `Learn ${topic} - Beginner's Guide`,
          url: `https://www.youtube.com/results?search_query=${encodeURIComponent(topic + ' tutorial')}`,
          description: `Comprehensive tutorial covering the basics of ${topic}`
        },
        {
          title: `${topic} Fundamentals`,
          url: `https://www.youtube.com/results?search_query=${encodeURIComponent(topic + ' fundamentals')}`,
          description: `Understanding the core concepts of ${topic}`
        },
        {
          title: `Advanced ${topic} Techniques`,
          url: `https://www.youtube.com/results?search_query=${encodeURIComponent(topic + ' advanced')}`,
          description: `Deep dive into advanced ${topic} concepts and techniques`
        }
      ];
    }

    // Fetch Reddit communities
    let communities = [];
    try {
      console.log('Searching Reddit communities...');
      const redditResponse = await fetch(
        `https://www.reddit.com/subreddits/search.json?q=${encodeURIComponent(topic)}&limit=5`,
        {
          headers: {
            'User-Agent': 'LearningApp/1.0'
          }
        }
      );

      if (redditResponse.ok) {
        const redditData = await redditResponse.json();
        communities = redditData.data?.children?.map((item: any) => ({
          name: item.data.display_name_prefixed,
          url: `https://www.reddit.com${item.data.url}`,
          platform: "Reddit",
          description: item.data.public_description || `Community for ${topic} enthusiasts`
        })) || [];
        console.log(`Found ${communities.length} Reddit communities`);
      }
    } catch (error) {
      console.error('Reddit API error:', error);
    }

    // Add fallback communities
    if (communities.length === 0) {
      communities = [
        {
          name: `r/${topic.toLowerCase().replace(/\s+/g, '')}`,
          url: `https://www.reddit.com/search/?q=${encodeURIComponent(topic)}`,
          platform: "Reddit",
          description: `Community for ${topic} enthusiasts and learners`
        }
      ];
    }

    // Add other community suggestions
    communities.push(
      {
        name: `${topic} Discord Server`,
        url: `https://discord.com/invite/search?q=${encodeURIComponent(topic)}`,
        platform: "Discord",
        description: `Real-time chat community for ${topic} learners`
      },
      {
        name: `${topic} Stack Overflow`,
        url: `https://stackoverflow.com/questions/tagged/${encodeURIComponent(topic.toLowerCase().replace(/\s+/g, '-'))}`,
        platform: "Stack Overflow",
        description: `Q&A community for technical ${topic} questions`
      }
    );

    // Generate image suggestions using Tavily or fallback
    let images = [];
    if (tavilyApiKey) {
      try {
        console.log('Searching for educational images...');
        const tavilyResponse = await fetch('https://api.tavily.com/search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${tavilyApiKey}`
          },
          body: JSON.stringify({
            query: `${topic} educational diagrams infographics`,
            search_depth: 'basic',
            include_images: true,
            max_results: 4
          })
        });

        if (tavilyResponse.ok) {
          const tavilyData = await tavilyResponse.json();
          images = tavilyData.images?.slice(0, 3).map((img: any) => ({
            title: `${topic} Visual Guide`,
            url: img.url,
            description: `Educational visual resource for understanding ${topic}`
          })) || [];
          console.log(`Found ${images.length} educational images`);
        }
      } catch (error) {
        console.error('Tavily API error:', error);
      }
    }

    // Fallback images
    if (images.length === 0) {
      images = [
        {
          title: `${topic} Infographic`,
          url: `https://www.google.com/search?q=${encodeURIComponent(topic + ' infographic')}&tbm=isch`,
          description: `Visual representations and infographics about ${topic}`
        },
        {
          title: `${topic} Diagrams`,
          url: `https://www.google.com/search?q=${encodeURIComponent(topic + ' diagram')}&tbm=isch`,
          description: `Diagrams and charts explaining ${topic} concepts`
        },
        {
          title: `${topic} Visual Guide`,
          url: `https://www.google.com/search?q=${encodeURIComponent(topic + ' visual guide')}&tbm=isch`,
          description: `Visual learning materials for ${topic}`
        }
      ];
    }

    const result = {
      overview: geminiResult.overview,
      videos: videos.slice(0, 4),
      tips: geminiResult.tips,
      images: images.slice(0, 3),
      communities: communities.slice(0, 5)
    };

    console.log('Successfully processed topic exploration with real API data');

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in explore-topic function:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return new Response(JSON.stringify({ error: errorMessage }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});