import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { topic } = await req.json();
    
    if (!topic) {
      throw new Error('Topic is required');
    }

    console.log('Exploring topic:', topic);

    // Get API keys
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    const geminiApiKeySecondary = Deno.env.get('GEMINI_API_KEY_SECONDARY');
    const youtubeApiKey = Deno.env.get('YOUTUBE_API_KEY');
    const redditApiKey = Deno.env.get('REDDIT_API_KEY');
    const tavilyApiKey = Deno.env.get('TAVILY_API_KEY');

    if (!geminiApiKey && !geminiApiKeySecondary) {
      throw new Error('GEMINI_API_KEY or GEMINI_API_KEY_SECONDARY must be configured');
    }

    // Helper function to call Gemini API with fallback
    const callGeminiAPI = async (prompt: string, apiKey: string) => {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: prompt
              }]
            }],
            generationConfig: {
              temperature: 0.3,
              topK: 20,
              topP: 0.8,
              maxOutputTokens: 800, // Reduced to avoid token limits
              responseMimeType: "application/json"
            }
          })
        }
      );

      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.status}`);
      }

      return response.json();
    };

    // Shorter, more focused prompt to avoid token limits
    const geminiPrompt = `Create educational content for "${topic}" in JSON format:

{
  "overview": "Brief 1-2 paragraph overview of ${topic}",
  "tips": [
    "5 practical learning tips as short strings"
  ],
  "learningSteps": [
    {
      "id": "step-1",
      "title": "Step Title",
      "description": "Brief task description",
      "completed": false
    }
  ]
}

Generate 7-10 progressive learning steps. Keep all text concise. Return valid JSON only.`;

    console.log('Calling Gemini API...');
    let geminiData;
    const currentApiKey = geminiApiKey || geminiApiKeySecondary;
    
    if (!currentApiKey) {
      throw new Error('No Gemini API keys available');
    }
    
    try {
      geminiData = await callGeminiAPI(geminiPrompt, currentApiKey);
    } catch (error) {
      console.error('Primary Gemini API error:', error);
      // Try secondary key if primary fails
      if (geminiApiKeySecondary && currentApiKey === geminiApiKey) {
        console.log('Trying secondary Gemini API key...');
        try {
          geminiData = await callGeminiAPI(geminiPrompt, geminiApiKeySecondary);
        } catch (secondaryError) {
          console.error('Secondary Gemini API error:', secondaryError);
          const errorMessage = error instanceof Error ? error.message : 'Unknown error';
          throw new Error(`Both Gemini API keys failed: ${errorMessage}`);
        }
      } else {
        throw error;
      }
    }
    const geminiContent = geminiData.candidates?.[0]?.content?.parts?.[0]?.text;
    
    console.log('Full Gemini API response:', JSON.stringify(geminiData, null, 2));
    
    if (!geminiContent) {
      console.error('No content in Gemini response. Structure:', {
        candidates: geminiData.candidates,
        candidateCount: geminiData.candidates?.length,
        firstCandidate: geminiData.candidates?.[0],
        content: geminiData.candidates?.[0]?.content,
        parts: geminiData.candidates?.[0]?.content?.parts,
        finishReason: geminiData.candidates?.[0]?.finishReason
      });
      
      // If we hit token limits, use fallback
      if (geminiData.candidates?.[0]?.finishReason === 'MAX_TOKENS') {
        console.log('Hit token limits, using fallback content');
      } else {
        throw new Error('No content generated by Gemini');
      }
    }

    console.log('Raw Gemini response:', geminiContent);

    // Parse Gemini response with better error handling
    let geminiJsonStr = geminiContent?.trim() || '';
    if (geminiJsonStr.startsWith('```json')) {
      geminiJsonStr = geminiJsonStr.slice(7);
    }
    if (geminiJsonStr.startsWith('```')) {
      geminiJsonStr = geminiJsonStr.slice(3);
    }
    if (geminiJsonStr.endsWith('```')) {
      geminiJsonStr = geminiJsonStr.slice(0, -3);
    }
    geminiJsonStr = geminiJsonStr.trim();

    let geminiResult;
    try {
      // If content is empty or truncated, use fallback
      if (!geminiJsonStr || geminiData.candidates?.[0]?.finishReason === 'MAX_TOKENS') {
        throw new Error('Content truncated due to token limits');
      }
      geminiResult = JSON.parse(geminiJsonStr);
    } catch (parseError) {
      console.error('Gemini JSON parse error:', parseError);
      console.error('Content to parse:', geminiJsonStr);
      console.error('Finish reason:', geminiData.candidates?.[0]?.finishReason);
      
      // Enhanced fallback content with topic-specific tasks
      geminiResult = {
        overview: `${topic} is a fascinating subject that offers valuable learning opportunities. This field encompasses various concepts and principles that can benefit learners at different levels. Understanding ${topic} requires dedication, practice, and a structured approach to build expertise progressively.`,
        tips: [
          `Start with the fundamentals of ${topic} to build a solid foundation`,
          `Practice regularly and apply concepts through hands-on exercises`,
          `Join communities and connect with other ${topic} enthusiasts`,
          `Use multiple learning resources to gain different perspectives`,
          `Set specific goals and track your progress in ${topic}`
        ],
        learningSteps: [
          { id: "step-1", title: `${topic} Basics`, description: `Learn fundamental concepts and terminology of ${topic}`, completed: false },
          { id: "step-2", title: "Core Principles", description: `Understand the main principles and theories behind ${topic}`, completed: false },
          { id: "step-3", title: "Practical Application", description: `Apply your knowledge through exercises and practice in ${topic}`, completed: false },
          { id: "step-4", title: "Intermediate Concepts", description: `Explore more complex topics and advanced concepts in ${topic}`, completed: false },
          { id: "step-5", title: "Hands-on Projects", description: `Work on real projects to deepen your understanding of ${topic}`, completed: false },
          { id: "step-6", title: "Advanced Techniques", description: `Master advanced methods and best practices in ${topic}`, completed: false },
          { id: "step-7", title: "Problem Solving", description: `Develop problem-solving skills specific to ${topic}`, completed: false },
          { id: "step-8", title: "Community Engagement", description: `Share knowledge and learn from the ${topic} community`, completed: false }
        ]
      };
    }

    // Fetch YouTube videos
    let videos = [];
    if (youtubeApiKey) {
      try {
        console.log('Searching YouTube videos...');
        const youtubeResponse = await fetch(
          `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(topic + ' tutorial')}&type=video&maxResults=5&key=${youtubeApiKey}`
        );

        if (youtubeResponse.ok) {
          const youtubeData = await youtubeResponse.json();
          videos = youtubeData.items?.map((item: any) => ({
            title: item.snippet.title,
            url: `https://www.youtube.com/watch?v=${item.id.videoId}`,
            description: item.snippet.description.substring(0, 150) + '...'
          })) || [];
          console.log(`Found ${videos.length} YouTube videos`);
        }
      } catch (error) {
        console.error('YouTube API error:', error);
      }
    }

    // Fallback videos if YouTube API fails
    if (videos.length === 0) {
      videos = [
        {
          title: `Learn ${topic} - Beginner's Guide`,
          url: `https://www.youtube.com/results?search_query=${encodeURIComponent(topic + ' tutorial')}`,
          description: `Comprehensive tutorial covering the basics of ${topic}`
        },
        {
          title: `${topic} Fundamentals`,
          url: `https://www.youtube.com/results?search_query=${encodeURIComponent(topic + ' fundamentals')}`,
          description: `Understanding the core concepts of ${topic}`
        },
        {
          title: `Advanced ${topic} Techniques`,
          url: `https://www.youtube.com/results?search_query=${encodeURIComponent(topic + ' advanced')}`,
          description: `Deep dive into advanced ${topic} concepts and techniques`
        }
      ];
    }

    // Fetch Reddit communities
    let communities = [];
    try {
      console.log('Searching Reddit communities...');
      const redditResponse = await fetch(
        `https://www.reddit.com/subreddits/search.json?q=${encodeURIComponent(topic)}&limit=5`,
        {
          headers: {
            'User-Agent': 'LearningApp/1.0'
          }
        }
      );

      if (redditResponse.ok) {
        const redditData = await redditResponse.json();
        communities = redditData.data?.children?.map((item: any) => ({
          name: item.data.display_name_prefixed,
          url: `https://www.reddit.com${item.data.url}`,
          platform: "Reddit",
          description: item.data.public_description || `Community for ${topic} enthusiasts`
        })) || [];
        console.log(`Found ${communities.length} Reddit communities`);
      }
    } catch (error) {
      console.error('Reddit API error:', error);
    }

    // Add fallback communities
    if (communities.length === 0) {
      communities = [
        {
          name: `r/${topic.toLowerCase().replace(/\s+/g, '')}`,
          url: `https://www.reddit.com/search/?q=${encodeURIComponent(topic)}`,
          platform: "Reddit",
          description: `Community for ${topic} enthusiasts and learners`
        }
      ];
    }

    // Add other community suggestions
    communities.push(
      {
        name: `${topic} Discord Server`,
        url: `https://discord.com/invite/search?q=${encodeURIComponent(topic)}`,
        platform: "Discord",
        description: `Real-time chat community for ${topic} learners`
      },
      {
        name: `${topic} Stack Overflow`,
        url: `https://stackoverflow.com/questions/tagged/${encodeURIComponent(topic.toLowerCase().replace(/\s+/g, '-'))}`,
        platform: "Stack Overflow",
        description: `Q&A community for technical ${topic} questions`
      }
    );

    // Fetch Wikipedia articles
    let wikipediaArticles = [];
    try {
      console.log('Searching Wikipedia articles...');
      // First, search for articles related to the topic
      const searchResponse = await fetch(
        `https://en.wikipedia.org/api/rest_v1/page/search/${encodeURIComponent(topic)}?limit=5`
      );

      if (searchResponse.ok) {
        const searchData = await searchResponse.json();
        
        // Get detailed info for each article
        for (const page of searchData.pages?.slice(0, 3) || []) {
          try {
            const summaryResponse = await fetch(
              `https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(page.key)}`
            );
            
            if (summaryResponse.ok) {
              const summaryData = await summaryResponse.json();
              wikipediaArticles.push({
                title: summaryData.title,
                url: summaryData.content_urls?.desktop?.page || `https://en.wikipedia.org/wiki/${encodeURIComponent(page.key)}`,
                description: summaryData.extract || page.description || `Wikipedia article about ${summaryData.title}`,
                thumbnail: summaryData.thumbnail?.source || null
              });
            }
          } catch (articleError) {
            console.error(`Error fetching Wikipedia article ${page.key}:`, articleError);
          }
        }
        console.log(`Found ${wikipediaArticles.length} Wikipedia articles`);
      }
    } catch (error) {
      console.error('Wikipedia API error:', error);
    }

    // Fallback Wikipedia articles if API fails
    if (wikipediaArticles.length === 0) {
      wikipediaArticles = [
        {
          title: topic,
          url: `https://en.wikipedia.org/wiki/${encodeURIComponent(topic.replace(/\s+/g, '_'))}`,
          description: `Learn more about ${topic} on Wikipedia`,
          thumbnail: null
        }
      ];
    }

    // Generate image suggestions using Tavily or fallback
    let images = [];
    if (tavilyApiKey) {
      try {
        console.log('Searching for educational images...');
        const tavilyResponse = await fetch('https://api.tavily.com/search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${tavilyApiKey}`
          },
          body: JSON.stringify({
            query: `${topic} educational diagrams infographics`,
            search_depth: 'basic',
            include_images: true,
            max_results: 4
          })
        });

        if (tavilyResponse.ok) {
          const tavilyData = await tavilyResponse.json();
          images = tavilyData.images?.slice(0, 3).map((img: any) => ({
            title: `${topic} Visual Guide`,
            url: img.url,
            description: `Educational visual resource for understanding ${topic}`
          })) || [];
          console.log(`Found ${images.length} educational images`);
        }
      } catch (error) {
        console.error('Tavily API error:', error);
      }
    }

    // Fallback images
    if (images.length === 0) {
      images = [
        {
          title: `${topic} Infographic`,
          url: `https://www.google.com/search?q=${encodeURIComponent(topic + ' infographic')}&tbm=isch`,
          description: `Visual representations and infographics about ${topic}`
        },
        {
          title: `${topic} Diagrams`,
          url: `https://www.google.com/search?q=${encodeURIComponent(topic + ' diagram')}&tbm=isch`,
          description: `Diagrams and charts explaining ${topic} concepts`
        },
        {
          title: `${topic} Visual Guide`,
          url: `https://www.google.com/search?q=${encodeURIComponent(topic + ' visual guide')}&tbm=isch`,
          description: `Visual learning materials for ${topic}`
        }
      ];
    }

    const result = {
      overview: geminiResult.overview,
      videos: videos.slice(0, 4),
      tips: geminiResult.tips,
      learningSteps: geminiResult.learningSteps || [],
      images: images.slice(0, 3),
      communities: communities.slice(0, 5),
      wikipediaArticles: wikipediaArticles.slice(0, 3)
    };

    console.log('Successfully processed topic exploration with real API data');

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in explore-topic function:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return new Response(JSON.stringify({ error: errorMessage }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});