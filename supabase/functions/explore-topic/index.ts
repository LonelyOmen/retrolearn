import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { topic } = await req.json();
    
    if (!topic) {
      throw new Error('Topic is required');
    }

    console.log('Exploring topic:', topic);

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY not configured');
    }

    const prompt = `You are an educational research assistant. For the topic "${topic}", provide comprehensive learning resources in this exact JSON format:

{
  "overview": "A detailed 2-3 paragraph overview explaining what this topic is, its importance, and key concepts",
  "videos": [
    {
      "title": "Specific video title",
      "url": "https://youtube.com/watch?v=example",
      "description": "Brief description of video content"
    }
  ],
  "tips": [
    "Practical beginner tip 1",
    "Practical beginner tip 2",
    "Practical beginner tip 3",
    "Practical beginner tip 4",
    "Practical beginner tip 5"
  ],
  "images": [
    {
      "title": "Image resource title",
      "url": "https://example.com/image",
      "description": "What this image shows or explains"
    }
  ],
  "communities": [
    {
      "name": "Community name",
      "url": "https://reddit.com/r/example",
      "platform": "Reddit",
      "description": "Description of community and what help they provide"
    }
  ]
}

Requirements:
- Provide 3-5 relevant video suggestions (prefer YouTube when possible)
- Include 5 actionable beginner tips
- Suggest 3-4 relevant images/visual resources
- Recommend 4-6 community platforms (Reddit, Discord, Forums, etc.)
- Use real URLs when possible, or realistic placeholder URLs
- Focus on high-quality, educational resources
- Ensure all content is beginner-friendly

Return ONLY the JSON response, no additional text.`;

    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          }
        })
      }
    );

    if (!geminiResponse.ok) {
      throw new Error(`Gemini API error: ${geminiResponse.status}`);
    }

    const geminiData = await geminiResponse.json();
    const content = geminiData.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!content) {
      throw new Error('No content generated by Gemini');
    }

    console.log('Raw Gemini response:', content);

    // Extract JSON from the response (handle code blocks)
    let jsonStr = content.trim();
    if (jsonStr.startsWith('```json')) {
      jsonStr = jsonStr.slice(7);
    }
    if (jsonStr.startsWith('```')) {
      jsonStr = jsonStr.slice(3);
    }
    if (jsonStr.endsWith('```')) {
      jsonStr = jsonStr.slice(0, -3);
    }
    jsonStr = jsonStr.trim();

    let parsedResult;
    try {
      parsedResult = JSON.parse(jsonStr);
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      console.error('Content to parse:', jsonStr);
      throw new Error('Failed to parse AI response');
    }

    // Validate required fields
    if (!parsedResult.overview || !parsedResult.videos || !parsedResult.tips || 
        !parsedResult.images || !parsedResult.communities) {
      throw new Error('Invalid response format from AI');
    }

    console.log('Successfully processed topic exploration');

    return new Response(JSON.stringify(parsedResult), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in explore-topic function:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return new Response(JSON.stringify({ error: errorMessage }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});